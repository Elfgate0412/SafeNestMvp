// prisma/schema.prisma

datasource db {
  provider = "sqlite"           // swap to "postgresql" later when ready
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===== Enums =====
enum Role {
  STUDENT
  HOST
  STAFF
  ADMIN
}

enum AppStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

// ===== Models =====

// Users for auth
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role     @default(STUDENT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  hostProfile  HostProfile?
  applications HostApplication[]
  listings     Listing[]
}

// Host profile (created/dated when approved)
model HostProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  approvedAt  DateTime?
  wwccNumber  String?
  policeCheck Boolean  @default(false)

  // basic address
  address1    String?
  address2    String?
  suburb      String?
  state       String?
  postcode    String?

  user        User     @relation(fields: [userId], references: [id])
}

// Host application workflow
model HostApplication {
  id          String     @id @default(cuid())
  userId      String
  status      AppStatus  @default(SUBMITTED)
  submittedAt DateTime   @default(now())
  reviewedAt  DateTime?
  reviewedBy  String?
  notes       String?

  firstName   String
  lastName    String
  phone       String
  dob         DateTime?
  wwccHas     Boolean    @default(false)
  policeHas   Boolean    @default(false)

  user        User       @relation(fields: [userId], references: [id])

  @@index([status])
}

// Listings (only allowed after approval)
model Listing {
  id            String         @id @default(cuid())
  userId        String
  title         String
  description   String?
  pricePerWeek  Int
  suburb        String
  state         String
  availableFrom DateTime?

  images        ListingImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id])
}

model ListingImage {
  id        String  @id @default(cuid())
  listingId String
  url       String
  sort      Int     @default(0)

  listing   Listing @relation(fields: [listingId], references: [id])
}
